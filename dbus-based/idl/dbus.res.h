/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef ___HOME_DEV_LAP_DOCUMENTS_CO_DEV_PROJECTS_DBUS_BASED_IDL_DBUS_RES_H__
#define ___HOME_DEV_LAP_DOCUMENTS_CO_DEV_PROJECTS_DBUS_BASED_IDL_DBUS_RES_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for dbus.demo.research */

#define TYPE_DBUS_DEMO_RESEARCH (dbus_demo_research_get_type ())
#define DBUS_DEMO_RESEARCH(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_DEMO_RESEARCH, DbusDemoResearch))
#define IS_DBUS_DEMO_RESEARCH(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_DEMO_RESEARCH))
#define DBUS_DEMO_RESEARCH_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DBUS_DEMO_RESEARCH, DbusDemoResearchIface))

struct _DbusDemoResearch;
typedef struct _DbusDemoResearch DbusDemoResearch;
typedef struct _DbusDemoResearchIface DbusDemoResearchIface;

struct _DbusDemoResearchIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_hello_to) (
    DbusDemoResearch *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_toSay);

  void (*on_completed) (
    DbusDemoResearch *object,
    const gchar *arg_from);

};

GType dbus_demo_research_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *dbus_demo_research_interface_info (void);
guint dbus_demo_research_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void dbus_demo_research_complete_hello_to (
    DbusDemoResearch *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void dbus_demo_research_emit_on_completed (
    DbusDemoResearch *object,
    const gchar *arg_from);



/* D-Bus method calls: */
void dbus_demo_research_call_hello_to (
    DbusDemoResearch *proxy,
    const gchar *arg_toSay,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean dbus_demo_research_call_hello_to_finish (
    DbusDemoResearch *proxy,
    GAsyncResult *res,
    GError **error);

gboolean dbus_demo_research_call_hello_to_sync (
    DbusDemoResearch *proxy,
    const gchar *arg_toSay,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_DBUS_DEMO_RESEARCH_PROXY (dbus_demo_research_proxy_get_type ())
#define DBUS_DEMO_RESEARCH_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_DEMO_RESEARCH_PROXY, DbusDemoResearchProxy))
#define DBUS_DEMO_RESEARCH_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DBUS_DEMO_RESEARCH_PROXY, DbusDemoResearchProxyClass))
#define DBUS_DEMO_RESEARCH_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DBUS_DEMO_RESEARCH_PROXY, DbusDemoResearchProxyClass))
#define IS_DBUS_DEMO_RESEARCH_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_DEMO_RESEARCH_PROXY))
#define IS_DBUS_DEMO_RESEARCH_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DBUS_DEMO_RESEARCH_PROXY))

typedef struct _DbusDemoResearchProxy DbusDemoResearchProxy;
typedef struct _DbusDemoResearchProxyClass DbusDemoResearchProxyClass;
typedef struct _DbusDemoResearchProxyPrivate DbusDemoResearchProxyPrivate;

struct _DbusDemoResearchProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DbusDemoResearchProxyPrivate *priv;
};

struct _DbusDemoResearchProxyClass
{
  GDBusProxyClass parent_class;
};

GType dbus_demo_research_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDemoResearchProxy, g_object_unref)
#endif

void dbus_demo_research_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDemoResearch *dbus_demo_research_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDemoResearch *dbus_demo_research_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void dbus_demo_research_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
DbusDemoResearch *dbus_demo_research_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
DbusDemoResearch *dbus_demo_research_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DBUS_DEMO_RESEARCH_SKELETON (dbus_demo_research_skeleton_get_type ())
#define DBUS_DEMO_RESEARCH_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DBUS_DEMO_RESEARCH_SKELETON, DbusDemoResearchSkeleton))
#define DBUS_DEMO_RESEARCH_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DBUS_DEMO_RESEARCH_SKELETON, DbusDemoResearchSkeletonClass))
#define DBUS_DEMO_RESEARCH_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DBUS_DEMO_RESEARCH_SKELETON, DbusDemoResearchSkeletonClass))
#define IS_DBUS_DEMO_RESEARCH_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DBUS_DEMO_RESEARCH_SKELETON))
#define IS_DBUS_DEMO_RESEARCH_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DBUS_DEMO_RESEARCH_SKELETON))

typedef struct _DbusDemoResearchSkeleton DbusDemoResearchSkeleton;
typedef struct _DbusDemoResearchSkeletonClass DbusDemoResearchSkeletonClass;
typedef struct _DbusDemoResearchSkeletonPrivate DbusDemoResearchSkeletonPrivate;

struct _DbusDemoResearchSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DbusDemoResearchSkeletonPrivate *priv;
};

struct _DbusDemoResearchSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType dbus_demo_research_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (DbusDemoResearchSkeleton, g_object_unref)
#endif

DbusDemoResearch *dbus_demo_research_skeleton_new (void);


G_END_DECLS

#endif /* ___HOME_DEV_LAP_DOCUMENTS_CO_DEV_PROJECTS_DBUS_BASED_IDL_DBUS_RES_H__ */
